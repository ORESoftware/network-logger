#!/usr/bin/env node


//http://stackoverflow.com/a/17365494/1223975

var async = require('async');
var app = require('../app');
var debug = require('debug')('network-logger:server');
var http = require('http');


var port = normalizePort(process.env.PORT || '3019');
app.set('port', port);


var tailer = require('../lib/tail');

async.parallel([function(cb){

    var sub = require('../lib/sub');

    sub.on('connect', function () {
        cb(null);
    });

    sub.on('err', function (err) {
        cb(err);
    });

}, function(cb){

    var pub = require('../lib/pub');

    pub.on('connect', function () {
        cb(null);
    });

    pub.on('err', function (err) {
        cb(err);
    });

}], function complete(err){

    if(err){
      throw err;
    }
    else{
        console.log('redis pub/sub is ready..starting server');
        startServer();
    }

});



function startServer() {
    http.createServer(app).listen(port).on('error', onError).on('listening', onListening);
}


function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}


function onError(err) {

    if (err.syscall !== 'listen') {
        throw err;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (err.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw err;
    }
}


function onListening() {
    var addr = this.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    console.log('Listening on ' + bind);
}
